# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f-M645V935845H42LvZvX1s_vcSe9dY-
"""

import pandas as pd
import geopandas as gpd
import plotly.express as px
import plotly.graph_objects as go
import folium
from folium import plugins
import streamlit as st
from datetime import datetime
import json

# Page configuration
st.set_page_config(
    page_title="Haiti Data Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load and prepare data
@st.cache_data
def load_data():
    """Load and merge the data with geographical information"""
    try:
        # Load the main dataset
        data_op_pres = pd.read_stata("data_op_pres.dta")

        # Load geographical data
        gdf = gpd.read_file("communes_haiti.shp")

        # Merge datasets
        gdf = gdf.merge(data_op_pres, how='left', left_on='ADM2_PCODE', right_on='adm2code')

        # Convert date column to datetime if it exists
        if 'date' in gdf.columns:
            gdf['date'] = pd.to_datetime(gdf['date'], errors='coerce')

        return gdf
    except Exception as e:
        st.error(f"Error loading data: {str(e)}")
        return None

# Helper functions for filtering
def filter_data(data, sector=None, department=None, org_type=None, date_range=None):
    """Filter data based on selected criteria"""
    filtered_data = data.copy()

    if sector and sector != "All":
        filtered_data = filtered_data[filtered_data['Secteur'] == sector]

    if department and department != "All":
        filtered_data = filtered_data[filtered_data['adm1code'] == department]

    if org_type and org_type != "All":
        filtered_data = filtered_data[filtered_data['Typedorganisation'] == org_type]

    if date_range and len(date_range) == 2:
        filtered_data = filtered_data[
            (filtered_data['date'] >= pd.to_datetime(date_range[0])) &
            (filtered_data['date'] <= pd.to_datetime(date_range[1]))
        ]

    return filtered_data

def create_bar_chart(data, group_by, title, x_label, y_label):
    """Create a bar chart with grouped data"""
    if data.empty:
        st.warning("No data available for the selected filters.")
        return

    grouped_data = data.groupby(group_by).size().reset_index(name='count')

    fig = px.bar(
        grouped_data,
        x=group_by,
        y='count',
        title=title,
        labels={group_by: x_label, 'count': y_label}
    )

    fig.update_layout(
        xaxis_tickangle=-45,
        height=400
    )

    st.plotly_chart(fig, use_container_width=True)

# Load data
data = load_data()

if data is not None:
    # Sidebar for navigation
    st.sidebar.title("Navigation")
    page = st.sidebar.selectbox("Choose a page", ["Basic Statistics", "Map Visualization"])

    # Get unique values for filters
    sectors = ["All"] + sorted(data['Secteur'].dropna().unique().tolist())
    departments = ["All"] + sorted(data['adm1code'].dropna().unique().tolist())
    org_types = ["All"] + sorted(data['Typedorganisation'].dropna().unique().tolist())

    # Date range for filtering
    if 'date' in data.columns and not data['date'].isna().all():
        min_date = data['date'].min()
        max_date = data['date'].max()
    else:
        min_date = max_date = datetime.now()

    # PAGE 1: BASIC STATISTICS
    if page == "Basic Statistics":
        st.title("Haiti Data - Basic Statistics")
        st.markdown("---")

        # Chart 1: By Sector and Department
        st.subheader("1. Data Distribution by Sector and Department")

        col1, col2 = st.columns(2)
        with col1:
            selected_sector = st.selectbox("Select Sector:", sectors, key="sector1")
        with col2:
            use_date_filter1 = st.checkbox("Filter by date range", key="date1")
            if use_date_filter1:
                date_range1 = st.date_input(
                    "Select date range:",
                    value=[min_date, max_date],
                    min_value=min_date,
                    max_value=max_date,
                    key="daterange1"
                )
            else:
                date_range1 = None

        # Filter and display chart 1
        filtered_data1 = filter_data(
            data,
            sector=selected_sector,
            date_range=date_range1 if use_date_filter1 else None
        )

        create_bar_chart(
            filtered_data1,
            'adm1code',
            f"Number of Records by Department - Sector: {selected_sector}",
            "Department",
            "Number of Records"
        )

        st.markdown("---")

        # Chart 2: By Organization Type and Department
        st.subheader("2. Data Distribution by Organization Type and Department")

        col1, col2 = st.columns(2)
        with col1:
            selected_org_type = st.selectbox("Select Organization Type:", org_types, key="org1")
        with col2:
            use_date_filter2 = st.checkbox("Filter by date range", key="date2")
            if use_date_filter2:
                date_range2 = st.date_input(
                    "Select date range:",
                    value=[min_date, max_date],
                    min_value=min_date,
                    max_value=max_date,
                    key="daterange2"
                )
            else:
                date_range2 = None

        # Filter and display chart 2
        filtered_data2 = filter_data(
            data,
            org_type=selected_org_type,
            date_range=date_range2 if use_date_filter2 else None
        )

        create_bar_chart(
            filtered_data2,
            'adm1code',
            f"Number of Records by Department - Organization Type: {selected_org_type}",
            "Department",
            "Number of Records"
        )

        st.markdown("---")

        # Chart 3: By Department and Sector
        st.subheader("3. Data Distribution by Department and Sector")

        col1, col2 = st.columns(2)
        with col1:
            selected_department = st.selectbox("Select Department:", departments[1:], key="dept1")  # Exclude "All"
        with col2:
            date_range3 = st.date_input(
                "Select date range:",
                value=[min_date, max_date],
                min_value=min_date,
                max_value=max_date,
                key="daterange3"
            )

        # Filter and display chart 3
        filtered_data3 = filter_data(
            data,
            department=selected_department,
            date_range=date_range3
        )

        create_bar_chart(
            filtered_data3,
            'Secteur',
            f"Number of Records by Sector - Department: {selected_department}",
            "Sector",
            "Number of Records"
        )

    # PAGE 2: MAP VISUALIZATION
    elif page == "Map Visualization":
        st.title("Haiti Data - Map Visualization")
        st.markdown("---")

        # Filters for map
        st.subheader("Filters")
        col1, col2, col3 = st.columns(3)

        with col1:
            map_sector = st.selectbox("Select Sector:", sectors, key="map_sector")
        with col2:
            map_department = st.selectbox("Select Department:", departments, key="map_dept")
        with col3:
            use_date_filter_map = st.checkbox("Filter by date range", key="map_date")
            if use_date_filter_map:
                map_date_range = st.date_input(
                    "Select date range:",
                    value=[min_date, max_date],
                    min_value=min_date,
                    max_value=max_date,
                    key="map_daterange"
                )
            else:
                map_date_range = None

        # Filter data for map
        map_data = filter_data(
            data,
            sector=map_sector,
            department=map_department,
            date_range=map_date_range if use_date_filter_map else None
        )

        if not map_data.empty:
            # Group data by commune and sector
            grouped_map_data = map_data.groupby(['adm2code', 'Secteur']).size().reset_index(name='count')

            # Pivot to get sectors as columns
            pivot_data = grouped_map_data.pivot(index='adm2code', columns='Secteur', values='count').fillna(0)

            # Merge back with geographical data
            map_gdf = data[['adm2code', 'geometry', 'ADM2_PCODE']].drop_duplicates().merge(
                pivot_data.reset_index(),
                on='adm2code',
                how='left'
            )

            # Create folium map
            st.subheader("Interactive Map")

            # Calculate map center
            bounds = map_gdf.bounds
            center_lat = (bounds.miny.mean() + bounds.maxy.mean()) / 2
            center_lon = (bounds.minx.mean() + bounds.maxx.mean()) / 2

            # Create base map
            m = folium.Map(
                location=[center_lat, center_lon],
                zoom_start=8,
                tiles='OpenStreetMap'
            )

            # Add polygons to map
            for idx, row in map_gdf.iterrows():
                if pd.notna(row['geometry']):
                    # Create tooltip text with sector counts
                    tooltip_text = f"<b>Commune: {row['adm2code']}</b><br>"

                    # Add sector counts to tooltip
                    for sector in pivot_data.columns:
                        if sector in row and pd.notna(row[sector]) and row[sector] > 0:
                            tooltip_text += f"{sector}: {int(row[sector])}<br>"

                    # Convert geometry to GeoJSON format
                    geom = row['geometry']
                    if hasattr(geom, '__geo_interface__'):
                        geojson_geom = geom.__geo_interface__
                    else:
                        continue

                    # Add polygon to map
                    folium.GeoJson(
                        geojson_geom,
                        style_function=lambda feature: {
                            'fillColor': 'lightblue',
                            'color': 'black',
                            'weight': 1,
                            'fillOpacity': 0.7,
                        },
                        tooltip=folium.Tooltip(tooltip_text, sticky=True)
                    ).add_to(m)

            # Display map
            st.success(f"Map showing {len(map_data)} records")
            st.components.v1.html(m._repr_html_(), height=600)

            # Show summary statistics
            st.subheader("Summary Statistics")
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("Total Records", len(map_data))
            with col2:
                st.metric("Unique Communes", map_data['adm2code'].nunique())
            with col3:
                st.metric("Unique Sectors", map_data['Secteur'].nunique())

        else:
            st.warning("No data available for the selected filters.")

else:
    st.error("Could not load the data. Please check that the files 'data_op_pres.dta' and 'communes_haiti.shp' are in the current directory.")